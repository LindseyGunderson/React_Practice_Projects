{"ast":null,"code":"const reducer = (state, action) => {\n  // clear items function\n  if (action.type === 'CLEAR_CART') {\n    return { ...state,\n      cart: []\n    };\n  } // remove single item from the cart\n\n\n  if (action.type === 'REMOVE_ITEM') {\n    return { ...state,\n      cart: state.cart.filter(cartItem => cartItem.id !== action.payload)\n    };\n  } // increase number of the item in the cart\n\n\n  if (action.type === 'INCREASE_ITEM') {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload) {\n        return { ...cartItem,\n          amount: cartItem.amount + 1\n        };\n      }\n\n      return cartItem;\n    });\n    return { ...state,\n      cart: tempCart\n    };\n  } // decrease number of items in the cart\n\n\n  if (action.type === 'DECREASE_ITEM') {\n    let tempCart = state.cart.map(cartItem => {\n      if (cartItem.id === action.payload) {\n        return { ...cartItem,\n          amount: cartItem.amount - 1\n        };\n      }\n\n      return cartItem;\n    }).filter(cartItem => cartItem.amount !== 0);\n    return { ...state,\n      cart: tempCart\n    };\n  } // update totals for the navbar and total price when cart is updated\n\n\n  if (action.type === 'GET_TOTALS') {\n    let {\n      total,\n      amount\n    } = state.cart.reduce((cartTotal, cartItem) => {\n      // total of items to add the the navbar\n      const {\n        price,\n        amount\n      } = cartItem; // price calculation for each item in the cart\n\n      const itemTotal = price * amount;\n      cartTotal.total += itemTotal;\n      cartTotal.amount += amount;\n      return cartTotal;\n    }, {\n      total: 0,\n      amount: 0\n    }); // parse the total and to 2 decimal places\n\n    total = parseFloat(total.toFixed(2));\n    return { ...state,\n      total,\n      amount\n    };\n  }\n\n  if (action.type === 'LOADING') {\n    return { ...state,\n      loading: true\n    };\n  }\n\n  if (action.type === 'DISPLAY_ITEMS') {\n    return { ...state,\n      cart: action.payload,\n      loading: false\n    };\n  }\n\n  return state;\n};\n\nexport default reducer;","map":{"version":3,"sources":["D:/Github_Projects/React_Practice_Projects/shopping_cart/src/reducer.js"],"names":["reducer","state","action","type","cart","filter","cartItem","id","payload","tempCart","map","amount","total","reduce","cartTotal","price","itemTotal","parseFloat","toFixed","loading"],"mappings":"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","sourcesContent":["const reducer = (state, action) => {\r\n\r\n    // clear items function\r\n    if(action.type === 'CLEAR_CART'){\r\n\r\n        return {...state,cart: []}\r\n\r\n    }\r\n\r\n    // remove single item from the cart\r\n    if(action.type === 'REMOVE_ITEM'){\r\n\r\n        return {...state, cart: state.cart.filter((cartItem)=> cartItem.id !== action.payload)}\r\n\r\n    }\r\n\r\n    // increase number of the item in the cart\r\n    if(action.type === 'INCREASE_ITEM'){\r\n\r\n        let tempCart = state.cart.map((cartItem)=>{\r\n\r\n            if(cartItem.id === action.payload){\r\n                \r\n                return {...cartItem, amount: cartItem.amount + 1};\r\n\r\n            }\r\n\r\n            return cartItem\r\n\r\n        })\r\n\r\n        return {...state, cart: tempCart}\r\n\r\n    }\r\n\r\n    // decrease number of items in the cart\r\n    if(action.type === 'DECREASE_ITEM'){\r\n\r\n        let tempCart = state.cart.map((cartItem)=>{\r\n\r\n            if(cartItem.id === action.payload){\r\n                \r\n                return {...cartItem, amount: cartItem.amount - 1};\r\n\r\n            }\r\n\r\n            return cartItem\r\n\r\n        }).filter((cartItem) => cartItem.amount !== 0)\r\n\r\n        return {...state, cart: tempCart}\r\n    }\r\n\r\n    // update totals for the navbar and total price when cart is updated\r\n    if(action.type === 'GET_TOTALS'){\r\n\r\n        let { total, amount } = state.cart.reduce((cartTotal, cartItem)=> {\r\n\r\n            // total of items to add the the navbar\r\n            const {price, amount} = cartItem;\r\n\r\n            // price calculation for each item in the cart\r\n            const itemTotal = price * amount;\r\n\r\n            cartTotal.total += itemTotal;\r\n            cartTotal.amount += amount;\r\n\r\n            return cartTotal\r\n\r\n        }, {\r\n            total: 0,\r\n            amount: 0\r\n        })\r\n\r\n        // parse the total and to 2 decimal places\r\n        total = parseFloat(total.toFixed(2));\r\n\r\n        return {...state, total, amount}\r\n    }\r\n\r\n    if(action.type === 'LOADING'){\r\n\r\n        return {...state, loading: true}\r\n    }\r\n\r\n    if(action.type === 'DISPLAY_ITEMS'){\r\n\r\n        return {...state, cart:action.payload, loading: false}\r\n    }\r\n\r\n\r\n    return state;\r\n\r\n}\r\n\r\nexport default reducer;"]},"metadata":{},"sourceType":"module"}